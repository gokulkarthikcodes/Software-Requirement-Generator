/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sdpproject;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Container;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.*;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.jdom2.Document;
import org.jdom2.Element;
import org.jdom2.input.SAXBuilder;
import org.jdom2.output.XMLOutputter;

/**
 *
 * @author gokulkarthik
 */
public class MainFrame extends javax.swing.JFrame {
    static String textSelected;
    static HashMap<String,Component> hashmap = new HashMap<String,Component>();
    static Requirement requirement;
    static PhraseComponent selectedObject;
    static PhraseComponent selectedParentObject;
    File file = null;
    //Requirement requirement;
    /**
     * Creates new form MainJFrame
     */
    public MainFrame() {
        initComponents();
        customizeComponents();
        updateRequirements();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jPanel2 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        generateRequirementSpecificationMenuItem = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        load = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Project Description");

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextArea1MouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTextArea1MouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 582, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE))
        );

        jLabel2.setText("Requirements");

        jScrollPane2.setViewportView(jTree1);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Import");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        generateRequirementSpecificationMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        generateRequirementSpecificationMenuItem.setText("Generate");
        generateRequirementSpecificationMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateRequirementSpecificationMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(generateRequirementSpecificationMenuItem);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Save");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        load.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        load.setText("Load");
        load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadActionPerformed(evt);
            }
        });
        jMenu1.add(load);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        int returnVal = chooser.showOpenDialog(null); //replace null with your swing container
        
        if(returnVal == JFileChooser.APPROVE_OPTION)     {
          file = chooser.getSelectedFile();    
        }
          System.out.println(file.getName());
        //JTextArea text = new JTextArea();
        BufferedReader in = null;
        try {
            in = new BufferedReader(new FileReader(file));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        String line = null;
        jTextArea1.setText("");
        jTextArea1.getText();
        try {
            line = in.readLine();
            while(line != null){
                jTextArea1.append(line + "\n");
                line = in.readLine();
            }
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jTextArea1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextArea1MouseClicked
        // TODO add your handling code here:
        if (jTextArea1.getSelectedText() != null) { // See if they selected something 
        String s = jTextArea1.getSelectedText();
        // Do work with String s
        textSelected=s;
            System.out.println(s);
        }
        
    }//GEN-LAST:event_jTextArea1MouseClicked

    private void jTextArea1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextArea1MouseReleased
        if (jTextArea1.getSelectedText() != null) { // See if they selected something 
        String s = jTextArea1.getSelectedText();
        // Do work with String s
            textSelected=s;
            System.out.println(s);
        }
    }//GEN-LAST:event_jTextArea1MouseReleased

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        //System.out.println(file.getName().split(".")[0]);
        //System.out.println(file.getName().split(".")[0]+".xml");
        
        saveAsXml(requirement, "requirements.xml",jTextArea1.getText());
    }//GEN-LAST:event_jMenuItem2ActionPerformed
   
    public class GenerateListener implements ActionListener{
    	JTextArea jta;
    	JFrame jf;
    	public GenerateListener(JTextArea jta,JFrame jf){
    		this.jta=jta;
    		this.jf=jf;
    	}
		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			if(e.getActionCommand().equals("generate")){
				
				try {
					FileWriter fw=new FileWriter(new File("requirement.txt"));
						fw.write(jta.getText());
						fw.close();
						
						JOptionPane jp=new JOptionPane();
						int result=jp.showConfirmDialog(null, "Export Successful!", "Acknowlegement", JOptionPane.OK_OPTION);
						if(result==JOptionPane.OK_OPTION)
			               {
			                   this.jf.setVisible(false);
			               }
			              
//						jf.add(jp,BorderLayout.CENTER);
//						jf.add(jb,BorderLayout.SOUTH);
//						jf.setTitle("acknowledgement");
//						jf.setSize(300,200);
//						jf.setVisible(true);
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
			
		}
    	
    }

    private void loadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadActionPerformed
          
//            	JFrame jf= new JFrame();
            	String path=null;
            	Container con=new Container();
            	JFileChooser jfc=new JFileChooser();
            	con.add(jfc);
            	jfc.setFileSelectionMode(0);
                int state=jfc.showOpenDialog(null);
                if(state==1){
                    return;
                }
                else{
                    File f=jfc.getSelectedFile();
                    path=f.getAbsolutePath();
                    if(path!=null){
                    	GenerateController gc=new GenerateController();
                    	requirement=loadRequirementFromXml(path);
                    	jTextArea1.setText(loadDescriptionFromXml(path));
                    	updateRequirements();
                    	
                    }
//                    System.out.println(f.getAbsolutePath());
                }
//            	jf.add(jfc);
//            	jf.setVisible(true);
        
    }//GEN-LAST:event_loadActionPerformed

    private void generateRequirementSpecificationMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateRequirementSpecificationMenuItemActionPerformed
        // TODO add your handling code here:
    	//*****************
    	GenerateController gc=new GenerateController();
    	saveAsXml(requirement, "requirement.xml",jTextArea1.getText());
    	String text=gc.generate(requirement);
        JFrame jf=new JFrame();
        JPanel jp1=new JPanel();
//        JPanel jp2=new JPanel();
        JButton jb1=new JButton("Export");
        JTextArea jta=new JTextArea();
       
        
        GenerateListener gl=new GenerateListener(jta,jf);
        jb1.addActionListener(gl);
        jb1.setActionCommand("generate");
       
        
        jta.setText(text);
        JScrollPane jsp=new JScrollPane(jta);
        jp1.add(jb1,BorderLayout.EAST);
//        jf.setLayout(new GridLayout(2,1));
        jf.add(jsp);
        jf.add(jp1,BorderLayout.SOUTH);
        jf.setTitle("generator");
        jf.setSize(550, 450);
        jf.setLocation(this.getLocation());
//        jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        jf.setVisible(true);
        
       
    }//GEN-LAST:event_generateRequirementSpecificationMenuItemActionPerformed
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem generateRequirementSpecificationMenuItem;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTree jTree1;
    private javax.swing.JMenuItem load;
    // End of variables declaration//GEN-END:variables
    
    

    public void customizeComponents() {
        requirement=new Requirement();
        
       jTextArea1.addMouseListener(new PopClickListener());
       jTree1.addMouseListener(new TreeClickListener());
       
       //jTree1.getSelectionModel().addTreeSelectionListener(new RequirementSelectionListener());
       
       hashmap.put("jTextArea1", jTextArea1);
       hashmap.put("jTree1", jTree1);
       hashmap.put("frame", this);
       
       
       
       
       //For checking purpose only, this is not part of code, please comment or remove it
       
//       BusinessProcess bp = new BusinessProcess("Business Process String", 1);
//       Step s = new Step("Step String");
//       Action a = new Action("Action String");
//       
//       Requirement.append(bp);
//       bp.append(s);
//       s.append(a);
       
       
       
    }

    public void updateRequirements() {
        
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("Requirement");
        root.setUserObject(requirement);
        int i=0,j=0,k=0;
        for (BusinessProcess businessProcess : requirement.getAggregates()) {
            
            String businessProcessString = businessProcess.getPhrase()+" (Priority : "+String.valueOf(businessProcess.getPriority())+")"; 
            DefaultMutableTreeNode businessProcessNode = new DefaultMutableTreeNode(businessProcess.toString());
            businessProcessNode.setUserObject(businessProcess);
            root.add(businessProcessNode);
            
            for (Step step : businessProcess.getAggregates()) {
                DefaultMutableTreeNode stepNode = new DefaultMutableTreeNode(step.getPhrase());
                stepNode.setUserObject(step);
                businessProcessNode.add(stepNode);
                
                for (Action action : step.getActions()) {
                    DefaultMutableTreeNode actionNode = new DefaultMutableTreeNode(action.getPhrase());
                    actionNode.setUserObject(action);
                    stepNode.add(actionNode);
                    k++;
                }
                j++;
            }
            i++;
        }
        
        
        DefaultTreeCellRenderer renderer = new DefaultTreeCellRenderer();
        //renderer.setLeafIcon(null);
        //create the tree by passing in the root node
        jTree1 = new JTree(root);
        jTree1.setRootVisible(false);
        jScrollPane2.setViewportView(jTree1);
        
        jTree1.getSelectionModel().addTreeSelectionListener(new RequirementSelectionListener());
        jTree1.addMouseListener(new TreeClickListener());
        
        
       
    }
    
    public void saveAsXml(Requirement requirement,String path ,String desc){
    	
    	Requirement r=requirement;
    	ArrayList <BusinessProcess> bpList=r.getAggregates();
    	try {
    		Document doc=new Document();
    		
    		Element root=new Element("Requirement");
    		doc.addContent(root);
    		Element description=new Element("Description");
    		description.setText(desc);
    		root.addContent(description);
    		for(BusinessProcess bp : bpList){
    			Element bpe=new Element("BusinessProcess");
    			bpe.setAttribute("name", bp.getPhrase());
    			bpe.setAttribute("priority", String.valueOf(bp.getPriority()));
    			if(bp.getAggregates().size()!=0){
    				for(Step s : bp.getAggregates()){
    					Element se=new Element("Step");
    					se.setAttribute("name",s.getPhrase());
    					if(s.getActions().size()!=0){
    						for(Action a : s.getActions()){
    							Element ae=new Element("Action");
    							ae.setAttribute("name", a.getPhrase());
    							se.addContent(ae);
    						}
    					}
    					bpe.addContent(se);
    				}
    			}
    			root.addContent(bpe);
    			
    		}
    		
    		XMLOutputter outputter = new XMLOutputter();
    		outputter.output(doc, new FileOutputStream(path));
    		} catch (Exception e) {
    		e.printStackTrace();
    		}
    	
    }

public Requirement loadRequirementFromXml(String path){
	Requirement r=new Requirement();
	try {

		// Build w/ SAX and JAXP, no validation
		SAXBuilder b = new SAXBuilder();
		// Create the document
		Document doc = b.build(new File(path));

		Element root=doc.getRootElement();  		
		if(root.getChildren().size()!=0 
				&& root.getChildren().get(1).getName().equals("BusinessProcess")){
			List bpelist=root.getChildren();
			for(int i=1;i<bpelist.size();i++){
				Element bpe=(Element)bpelist.get(i);
				BusinessProcess bp= new BusinessProcess(bpe.getAttributeValue("name"),bpe.getAttribute("priority").getIntValue());
				if(bpe.getChildren().size()!=0
						&& bpe.getChildren().get(0).getName().equals("Step")){
					List selist=bpe.getChildren();
					for(int j=0;j<selist.size();j++){
						Element se=(Element)selist.get(j);
						Step s=new Step(se.getAttributeValue("name"));
						if(se.getChildren().size()!=0
								&& se.getChildren().get(0).getName().equals("Action")){
							List alist=se.getChildren();
							for(int k=0;k<alist.size();k++){
								Element ae=(Element)alist.get(k);
								Action a = new Action(ae.getAttributeValue("name"));
								s.append(a);
							}
						}
						bp.append(s);
					}
				}
				r.getAggregates().add(bp);
			}
		}

		} catch (Exception e) {

		e.printStackTrace();
		}
	
	return r;
}

public String loadDescriptionFromXml (String path){
	String desc=null;
	
	try {

		// Build w/ SAX and JAXP, no validation
		SAXBuilder b = new SAXBuilder();
		// Create the document
		Document doc = b.build(new File(path));

		Element root=doc.getRootElement();  		
		if(root.getChildren().size()>1 
				&& root.getChildren().get(0).getName().equals("Description")){
			desc=root.getChildText("Description");
			
		}

		} catch (Exception e) {

		e.printStackTrace();
		}
	return desc;
	
}


}
